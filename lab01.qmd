---
title: "BEE 4750 Lab 1: Julia Basics"
format:
    html:        
        warning: true
        error: true
    ipynb:
        warning: true
        error: true
        code-annotation: below
jupyter: julia-1.9
format-links: []
---

::: {.content-visible when-format="ipynb"}
**Name**:

**ID**:
:::

::: {.callout-important icon=false}
### Due Date

Friday, 9/1/23, 9:00pm
:::

::: {.content-visible when-format="html"}

:::{.callout-caution}

If you are enrolled in the course, make sure that you use the GitHub Classroom link provided in Ed Discussion, or you may not be able to get help if you run into problems.

Otherwise, you can [find the Github repository here]({{< var github_org.repo >}}/lab01).

:::

:::

## Setup

The following code should go at the top of most Julia scripts; it will load the local package environment and install any needed packages. You will see this often and shouldn't need to touch it.

```{julia}
#| output: false

import Pkg
Pkg.activate(".")
Pkg.instantiate()
```

This next cell loads packages which are required for the rest of the code evaluation. In this case, we only need to load the `Plots.jl` plotting package, but you will see others over the course of the semester (and can add more if desired; just make sure that you've [added the new packages to the environment](https://viveks.me/environmental-systems-analysis/tutorials/julia-basics.html#package-management)). Standard Julia practice is to load all of the needed packages at the top of the file.

```{julia}
#| output: false

using Plots
```


## Introduction

### Julia

Julia is an up-and-coming language, originally developed for scientific programming. While learning a new programming language always has its hiccups, the good news is that if you've programmed in a high-level language such as Python or MATLAB, most Julia concepts should look familiar.

If you have not successfully set up Julia, follow the instructions in [Tools Setup](https://viveks.me/environmental-systems-analysis/setup.html) and/or ask for help.

You can use other editors for this course, but our recommendation is [Visual Studio Code](https://code.visualstudio.com/) with the [Julia extension](https://marketplace.visualstudio.com/items?itemName=julialang.language-julia), which will make life a *lot* simpler! You should have set this up by following the [Tools Setup](https://viveks.me/environmental-systems-analysis/setup.html) instructions, but if not, do so now and/or ask for help.

### Jupyter Notebooks

Jupyter notebooks integrate text and equations in Markdown with Julia (or Python, or R) code. To do this, Jupyter notebooks consist of two types of "cells": code cells and Markdown (text) cells.

Click once on this section of text. A box will appear around this text (and some areas above/below it) - all of that is within this cell.

Markdown is a text markup framework for formatting language that makes things look pretty when viewed across different platforms: web browsers, notebooks, and so forth. Text written in Markdown can also include hyperlinks, LaTeX equations, section headers, and images, among other features (most of [the course website](https://viveks.me/climate-risk-analysis) and the lecture notes were all written in Markdown!). [Here is a basic Markdown cheat sheet](https://www.markdownguide.org/cheat-sheet/).

What you are looking at right now is the formatted text after the Markdown is processed. To see the raw Markdown, do one of:

- press `Enter` while that cell is selected, or
- double-click on that cell.

---

A couple of the features you will see in this Markdown cell:

- The `---` command creates a horizontal line. This is also nice for separating sections.
- Backticks (`` `...` ``) can be used to format and highlight code, keystrokes, etc.
- The `#` sign is used to create a new section header; two `#` signs (`##`) is used to create a new subsection header; `###` creates a subsubsection, and so on.
- You can create a bulleted list by using the asterisk `*` or a dash `-` and a space.
- You can create regular text by just typing as usual.
- You can create **bold-faced text** by wrapping it with two asterisks on both sides.
- You can create *italicized text* by wrapping it with a single asterisk on both sides.
- To create a new paragraph, you must include a blank line between the old and new paragraphs.

At this point you might be wondering how to turn this cell back into the fully formatted Markdown text instead of the raw Markdown you're probably still looking at. You have a couple of options, depending on your platform, but the most consistent is to type `Shift + Enter` to **execute** the cell (this is also how to run code, but more on that later).

Additionally, you will frequently need to create new cells in your Jupyter notebooks. How you do this will depend on how you interact with the notebook, but try to figure this out now.

One tip is to think carefully about what bits of code should be in the same cell, as you typically only see output from the last command in a cell. For example, compare the following:

```{julia}
x = 5
sin(x)
```

with 

```{julia}
x = 5
```

```{julia}
sin(x)
```

In Julia, you can also suppress the output of a command with a semi-colon:

```{julia}
sin(x);
```

which can help if you want to split some code out for clarity or to insert some text prior to it, but don't want to clutter the notebook with its output.

For code cells, to execute the commands within the cell, we also press `Shift+Enter`.

Finally, **make sure that you evaluate all of the code cells in order before submitting**. One bad outcome with notebooks occurs when cells are evaluated out of order, so fixed bugs and edits in previous cells do not get a chance to propagate down. You can do this with the `Run All` command in whichever interface you're using to edit your notebook.

### Julia Basics

There are many tutorials and references for Julia, including a [basics overview on the class website](../tutorials/julia-basics.html). Please feel free to reference these as you work through any part of the course.


### Formatting Math

It will often be helpful to include nicely-formatted mathematics in a notebook. Markdown accomodates this using LaTeX syntax. A LaTeX cheatsheet is available on the class website, and many other guides exist online. 

Below is an example of a formatted equation: $$x = 5.$$

### Looking For Help

There is no shame in using Google, or other resources, for help when programming. There are many, many times when you can't quite get the syntax to work, can't quite figure out the right package or command to use, or are feeling too lazy or overwhelmed (I'm not judging either of those!) to dig through the documentation. Some good resources include:

- [Stack Overflow](https://stackoverflow.com/) is a treasure trove of answers;
- The [official Julia forum](https://discourse.julialang.org/) and the [Julia Subreddit](https://www.reddit.com/r/Julia/) are also very useful. 

You are also highly encouraged to post on [Ed Discussion](https://us.edstem.org), though getting a response might be less immediate. Just be mindful that to get good answers, [you have to help people help you](https://stackoverflow.com/help/how-to-ask), and **make sure to give credit to any resources that were helpful**!


## Exercises (10 points)

Use your understanding of Julia syntax to complete the following (hopefully short) exercises. Convert your completed notebook to a PDF and submit it to the Gradescope Assignment "Lab 1".

**Remember to**:

- Evaluate all of your code cells, in order (using a `Run All` command). This will make sure all output is visible and that the code cells were evaluated in the correct order.
- Tag each of the problems when you submit to Gradescope; a 10% penalty will be deducted if this is not done.

### Exercise 1 (3 points)

Given two numeric arrays `x` and `y`, write a function to compute their dot product if they have equal length, and return an error if not (this is useful for debugging!). Use the following code as a starting point. 

```{julia}
#| eval: false

function dot_product(x, y)
    if ... # insert test condition for equal lengths
        # compute and return dot product
    else
        throw(DimensionMismatch("length of x not equal to length of y"))
    end
end
```

Here are some tests to make sure your code works as intended. Tests like these are useful to make sure everything works as intended. One reason to split your code up into functions is that it makes it straightforward to write tests to make sure each piece of your code works, which makes it easier to identify where errors are occuring.

```{julia}
#| eval: false

dot_product([1 2 3], [4 5 6])
```

If you know the value you should get, you can write a more formal test using the `@assert` macro, which is a good way to "automate" checking (since you get an obvious error if the code doesn't work as desired):
```{julia}
#| eval: false

@assert dot_product([1 2 3], [4 5 6]) == 32
```

Let's also make sure we get an error when the dimensions of the two vectors don't match:
```{julia}
#| eval: false

dot_product([1 2 3], [4 5])
```

### Exercise 2 (3 points)

This problem involves implementing Newton's method for computing square roots; it was shamelessly copied from MIT's [Introduction to Computational Thinking](https://computationalthinking.mit.edu/Spring21/hw0/). You will use a `while` loop instead of the `for` loop shown above.

Implement the following algorithm in a function `newton_sqrt`:

Given $x > 0$:

1. Take a guess $a$.
2. Divide $x$ by $a$.  
3. Update $a$ as the average of $x/a$ and $a$.
4. Repeat until $x/a$ is within a tolerance of $\varepsilon$ from $a$.
5. Return $a \approx \sqrt{x}$.

```{julia}
#| eval: false
# insert your code here

```

Use your `newton_sqrt` function to compute $\sqrt{2}$ to within a tolerance of $\varepsilon = 0.01$.

```{julia}
#| eval: false
# insert your code here

```

### Exercise 3: Making a Plot (3 points)

Write a function to compute the square of an integer `x`. Evaluate this function for integers between $x=-5$ and $x=5$ and make a plot of the squared values (you can find a quick guide to making various types of plots [here](../tutorials/julia-plots.html)). Make sure to label your axes. 

```{julia}
#| eval: false
# insert your code here

```

## Export and Submit the Notebook (1 point)

The last step is to export the notebook for submission to Gradescope (this section won't be repeated going forward, but the steps are the same).

You should see the following menu bar at the top of the VS Code window:
![Notebook Menu Bar](figures/vs-code-top-bar.png)

1. Click "Run All" at the top to execute all of the cells in order. **Please do not forget to do this before exporting and submitting or you may lose points because your code has not been executed or may have errors**.
2. Click the ellipsis ("...") and select "Export". If you have LaTeX installed, you can click "PDF"; otherwise, click "HTML." Save the file, and then when prompted, open the file. This should open the page in your browser; go to the print interface and save as a PDF.
::: {.callout-tip}
When printing to PDF, long lines will run off the edge of code cells, which may result in comments or code being hidden. If you see this, go back to the notebook and break up long lines into shorter onces (for example, see the comment in the above code cell) to ensure key parts of your results aren't missing.
:::

Great! That's the basic workflow for every assignment in this course. 

Now you have your PDF that you can submit to Gradescope. Make sure that you tag pages corresponding to relevant problems to avoid a 10% penalty.